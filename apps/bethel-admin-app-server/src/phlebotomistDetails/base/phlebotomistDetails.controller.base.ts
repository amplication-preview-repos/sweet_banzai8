/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PhlebotomistDetailsService } from "../phlebotomistDetails.service";
import { PhlebotomistDetailsCreateInput } from "./PhlebotomistDetailsCreateInput";
import { PhlebotomistDetails } from "./PhlebotomistDetails";
import { PhlebotomistDetailsFindManyArgs } from "./PhlebotomistDetailsFindManyArgs";
import { PhlebotomistDetailsWhereUniqueInput } from "./PhlebotomistDetailsWhereUniqueInput";
import { PhlebotomistDetailsUpdateInput } from "./PhlebotomistDetailsUpdateInput";

export class PhlebotomistDetailsControllerBase {
  constructor(protected readonly service: PhlebotomistDetailsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PhlebotomistDetails })
  async createPhlebotomistDetails(
    @common.Body() data: PhlebotomistDetailsCreateInput
  ): Promise<PhlebotomistDetails> {
    return await this.service.createPhlebotomistDetails({
      data: data,
      select: {
        createdAt: true,
        id: true,
        plebBloodGroup: true,
        plebEmail: true,
        plebId: true,
        plebName: true,
        plebPhoneNo: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PhlebotomistDetails] })
  @ApiNestedQuery(PhlebotomistDetailsFindManyArgs)
  async phlebotomistDetailsItems(
    @common.Req() request: Request
  ): Promise<PhlebotomistDetails[]> {
    const args = plainToClass(PhlebotomistDetailsFindManyArgs, request.query);
    return this.service.phlebotomistDetailsItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        plebBloodGroup: true,
        plebEmail: true,
        plebId: true,
        plebName: true,
        plebPhoneNo: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PhlebotomistDetails })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async phlebotomistDetails(
    @common.Param() params: PhlebotomistDetailsWhereUniqueInput
  ): Promise<PhlebotomistDetails | null> {
    const result = await this.service.phlebotomistDetails({
      where: params,
      select: {
        createdAt: true,
        id: true,
        plebBloodGroup: true,
        plebEmail: true,
        plebId: true,
        plebName: true,
        plebPhoneNo: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PhlebotomistDetails })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePhlebotomistDetails(
    @common.Param() params: PhlebotomistDetailsWhereUniqueInput,
    @common.Body() data: PhlebotomistDetailsUpdateInput
  ): Promise<PhlebotomistDetails | null> {
    try {
      return await this.service.updatePhlebotomistDetails({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          plebBloodGroup: true,
          plebEmail: true,
          plebId: true,
          plebName: true,
          plebPhoneNo: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PhlebotomistDetails })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePhlebotomistDetails(
    @common.Param() params: PhlebotomistDetailsWhereUniqueInput
  ): Promise<PhlebotomistDetails | null> {
    try {
      return await this.service.deletePhlebotomistDetails({
        where: params,
        select: {
          createdAt: true,
          id: true,
          plebBloodGroup: true,
          plebEmail: true,
          plebId: true,
          plebName: true,
          plebPhoneNo: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
