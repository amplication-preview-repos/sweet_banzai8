/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PatientAppointmentsService } from "../patientAppointments.service";
import { PatientAppointmentsCreateInput } from "./PatientAppointmentsCreateInput";
import { PatientAppointments } from "./PatientAppointments";
import { PatientAppointmentsFindManyArgs } from "./PatientAppointmentsFindManyArgs";
import { PatientAppointmentsWhereUniqueInput } from "./PatientAppointmentsWhereUniqueInput";
import { PatientAppointmentsUpdateInput } from "./PatientAppointmentsUpdateInput";

export class PatientAppointmentsControllerBase {
  constructor(protected readonly service: PatientAppointmentsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PatientAppointments })
  async createPatientAppointments(
    @common.Body() data: PatientAppointmentsCreateInput
  ): Promise<PatientAppointments> {
    return await this.service.createPatientAppointments({
      data: data,
      select: {
        appointment: true,
        appointmentId: true,
        appointmentRef: true,
        createdAt: true,
        id: true,
        patient: true,
        patientId: true,
        patientRef: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PatientAppointments] })
  @ApiNestedQuery(PatientAppointmentsFindManyArgs)
  async patientAppointmentsItems(
    @common.Req() request: Request
  ): Promise<PatientAppointments[]> {
    const args = plainToClass(PatientAppointmentsFindManyArgs, request.query);
    return this.service.patientAppointmentsItems({
      ...args,
      select: {
        appointment: true,
        appointmentId: true,
        appointmentRef: true,
        createdAt: true,
        id: true,
        patient: true,
        patientId: true,
        patientRef: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PatientAppointments })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async patientAppointments(
    @common.Param() params: PatientAppointmentsWhereUniqueInput
  ): Promise<PatientAppointments | null> {
    const result = await this.service.patientAppointments({
      where: params,
      select: {
        appointment: true,
        appointmentId: true,
        appointmentRef: true,
        createdAt: true,
        id: true,
        patient: true,
        patientId: true,
        patientRef: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PatientAppointments })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePatientAppointments(
    @common.Param() params: PatientAppointmentsWhereUniqueInput,
    @common.Body() data: PatientAppointmentsUpdateInput
  ): Promise<PatientAppointments | null> {
    try {
      return await this.service.updatePatientAppointments({
        where: params,
        data: data,
        select: {
          appointment: true,
          appointmentId: true,
          appointmentRef: true,
          createdAt: true,
          id: true,
          patient: true,
          patientId: true,
          patientRef: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PatientAppointments })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePatientAppointments(
    @common.Param() params: PatientAppointmentsWhereUniqueInput
  ): Promise<PatientAppointments | null> {
    try {
      return await this.service.deletePatientAppointments({
        where: params,
        select: {
          appointment: true,
          appointmentId: true,
          appointmentRef: true,
          createdAt: true,
          id: true,
          patient: true,
          patientId: true,
          patientRef: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
