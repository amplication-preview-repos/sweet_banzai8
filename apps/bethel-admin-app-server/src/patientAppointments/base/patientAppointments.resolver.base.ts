/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PatientAppointments } from "./PatientAppointments";
import { PatientAppointmentsCountArgs } from "./PatientAppointmentsCountArgs";
import { PatientAppointmentsFindManyArgs } from "./PatientAppointmentsFindManyArgs";
import { PatientAppointmentsFindUniqueArgs } from "./PatientAppointmentsFindUniqueArgs";
import { CreatePatientAppointmentsArgs } from "./CreatePatientAppointmentsArgs";
import { UpdatePatientAppointmentsArgs } from "./UpdatePatientAppointmentsArgs";
import { DeletePatientAppointmentsArgs } from "./DeletePatientAppointmentsArgs";
import { PatientAppointmentsService } from "../patientAppointments.service";
@graphql.Resolver(() => PatientAppointments)
export class PatientAppointmentsResolverBase {
  constructor(protected readonly service: PatientAppointmentsService) {}

  async _patientAppointmentsItemsMeta(
    @graphql.Args() args: PatientAppointmentsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PatientAppointments])
  async patientAppointmentsItems(
    @graphql.Args() args: PatientAppointmentsFindManyArgs
  ): Promise<PatientAppointments[]> {
    return this.service.patientAppointmentsItems(args);
  }

  @graphql.Query(() => PatientAppointments, { nullable: true })
  async patientAppointments(
    @graphql.Args() args: PatientAppointmentsFindUniqueArgs
  ): Promise<PatientAppointments | null> {
    const result = await this.service.patientAppointments(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PatientAppointments)
  async createPatientAppointments(
    @graphql.Args() args: CreatePatientAppointmentsArgs
  ): Promise<PatientAppointments> {
    return await this.service.createPatientAppointments({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => PatientAppointments)
  async updatePatientAppointments(
    @graphql.Args() args: UpdatePatientAppointmentsArgs
  ): Promise<PatientAppointments | null> {
    try {
      return await this.service.updatePatientAppointments({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PatientAppointments)
  async deletePatientAppointments(
    @graphql.Args() args: DeletePatientAppointmentsArgs
  ): Promise<PatientAppointments | null> {
    try {
      return await this.service.deletePatientAppointments(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
