/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  PatientAppointments as PrismaPatientAppointments,
} from "@prisma/client";

export class PatientAppointmentsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PatientAppointmentsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.patientAppointments.count(args);
  }

  async patientAppointmentsItems(
    args: Prisma.PatientAppointmentsFindManyArgs
  ): Promise<PrismaPatientAppointments[]> {
    return this.prisma.patientAppointments.findMany(args);
  }
  async patientAppointments(
    args: Prisma.PatientAppointmentsFindUniqueArgs
  ): Promise<PrismaPatientAppointments | null> {
    return this.prisma.patientAppointments.findUnique(args);
  }
  async createPatientAppointments(
    args: Prisma.PatientAppointmentsCreateArgs
  ): Promise<PrismaPatientAppointments> {
    return this.prisma.patientAppointments.create(args);
  }
  async updatePatientAppointments(
    args: Prisma.PatientAppointmentsUpdateArgs
  ): Promise<PrismaPatientAppointments> {
    return this.prisma.patientAppointments.update(args);
  }
  async deletePatientAppointments(
    args: Prisma.PatientAppointmentsDeleteArgs
  ): Promise<PrismaPatientAppointments> {
    return this.prisma.patientAppointments.delete(args);
  }
}
