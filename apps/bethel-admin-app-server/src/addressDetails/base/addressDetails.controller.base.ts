/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AddressDetailsService } from "../addressDetails.service";
import { AddressDetailsCreateInput } from "./AddressDetailsCreateInput";
import { AddressDetails } from "./AddressDetails";
import { AddressDetailsFindManyArgs } from "./AddressDetailsFindManyArgs";
import { AddressDetailsWhereUniqueInput } from "./AddressDetailsWhereUniqueInput";
import { AddressDetailsUpdateInput } from "./AddressDetailsUpdateInput";

export class AddressDetailsControllerBase {
  constructor(protected readonly service: AddressDetailsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AddressDetails })
  async createAddressDetails(
    @common.Body() data: AddressDetailsCreateInput
  ): Promise<AddressDetails> {
    return await this.service.createAddressDetails({
      data: data,
      select: {
        addressId: true,
        createdAt: true,
        id: true,
        locationUrl: true,
        residenceText: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AddressDetails] })
  @ApiNestedQuery(AddressDetailsFindManyArgs)
  async addressDetailsItems(
    @common.Req() request: Request
  ): Promise<AddressDetails[]> {
    const args = plainToClass(AddressDetailsFindManyArgs, request.query);
    return this.service.addressDetailsItems({
      ...args,
      select: {
        addressId: true,
        createdAt: true,
        id: true,
        locationUrl: true,
        residenceText: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AddressDetails })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async addressDetails(
    @common.Param() params: AddressDetailsWhereUniqueInput
  ): Promise<AddressDetails | null> {
    const result = await this.service.addressDetails({
      where: params,
      select: {
        addressId: true,
        createdAt: true,
        id: true,
        locationUrl: true,
        residenceText: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AddressDetails })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAddressDetails(
    @common.Param() params: AddressDetailsWhereUniqueInput,
    @common.Body() data: AddressDetailsUpdateInput
  ): Promise<AddressDetails | null> {
    try {
      return await this.service.updateAddressDetails({
        where: params,
        data: data,
        select: {
          addressId: true,
          createdAt: true,
          id: true,
          locationUrl: true,
          residenceText: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AddressDetails })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAddressDetails(
    @common.Param() params: AddressDetailsWhereUniqueInput
  ): Promise<AddressDetails | null> {
    try {
      return await this.service.deleteAddressDetails({
        where: params,
        select: {
          addressId: true,
          createdAt: true,
          id: true,
          locationUrl: true,
          residenceText: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
