/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AddressDetails } from "./AddressDetails";
import { AddressDetailsCountArgs } from "./AddressDetailsCountArgs";
import { AddressDetailsFindManyArgs } from "./AddressDetailsFindManyArgs";
import { AddressDetailsFindUniqueArgs } from "./AddressDetailsFindUniqueArgs";
import { CreateAddressDetailsArgs } from "./CreateAddressDetailsArgs";
import { UpdateAddressDetailsArgs } from "./UpdateAddressDetailsArgs";
import { DeleteAddressDetailsArgs } from "./DeleteAddressDetailsArgs";
import { AddressDetailsService } from "../addressDetails.service";
@graphql.Resolver(() => AddressDetails)
export class AddressDetailsResolverBase {
  constructor(protected readonly service: AddressDetailsService) {}

  async _addressDetailsItemsMeta(
    @graphql.Args() args: AddressDetailsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [AddressDetails])
  async addressDetailsItems(
    @graphql.Args() args: AddressDetailsFindManyArgs
  ): Promise<AddressDetails[]> {
    return this.service.addressDetailsItems(args);
  }

  @graphql.Query(() => AddressDetails, { nullable: true })
  async addressDetails(
    @graphql.Args() args: AddressDetailsFindUniqueArgs
  ): Promise<AddressDetails | null> {
    const result = await this.service.addressDetails(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => AddressDetails)
  async createAddressDetails(
    @graphql.Args() args: CreateAddressDetailsArgs
  ): Promise<AddressDetails> {
    return await this.service.createAddressDetails({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => AddressDetails)
  async updateAddressDetails(
    @graphql.Args() args: UpdateAddressDetailsArgs
  ): Promise<AddressDetails | null> {
    try {
      return await this.service.updateAddressDetails({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AddressDetails)
  async deleteAddressDetails(
    @graphql.Args() args: DeleteAddressDetailsArgs
  ): Promise<AddressDetails | null> {
    try {
      return await this.service.deleteAddressDetails(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
