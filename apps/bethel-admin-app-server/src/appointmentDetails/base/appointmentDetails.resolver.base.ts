/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { AppointmentDetails } from "./AppointmentDetails";
import { AppointmentDetailsCountArgs } from "./AppointmentDetailsCountArgs";
import { AppointmentDetailsFindManyArgs } from "./AppointmentDetailsFindManyArgs";
import { AppointmentDetailsFindUniqueArgs } from "./AppointmentDetailsFindUniqueArgs";
import { CreateAppointmentDetailsArgs } from "./CreateAppointmentDetailsArgs";
import { UpdateAppointmentDetailsArgs } from "./UpdateAppointmentDetailsArgs";
import { DeleteAppointmentDetailsArgs } from "./DeleteAppointmentDetailsArgs";
import { AppointmentDetailsService } from "../appointmentDetails.service";
@graphql.Resolver(() => AppointmentDetails)
export class AppointmentDetailsResolverBase {
  constructor(protected readonly service: AppointmentDetailsService) {}

  async _appointmentDetailsItemsMeta(
    @graphql.Args() args: AppointmentDetailsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [AppointmentDetails])
  async appointmentDetailsItems(
    @graphql.Args() args: AppointmentDetailsFindManyArgs
  ): Promise<AppointmentDetails[]> {
    return this.service.appointmentDetailsItems(args);
  }

  @graphql.Query(() => AppointmentDetails, { nullable: true })
  async appointmentDetails(
    @graphql.Args() args: AppointmentDetailsFindUniqueArgs
  ): Promise<AppointmentDetails | null> {
    const result = await this.service.appointmentDetails(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => AppointmentDetails)
  async createAppointmentDetails(
    @graphql.Args() args: CreateAppointmentDetailsArgs
  ): Promise<AppointmentDetails> {
    return await this.service.createAppointmentDetails({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => AppointmentDetails)
  async updateAppointmentDetails(
    @graphql.Args() args: UpdateAppointmentDetailsArgs
  ): Promise<AppointmentDetails | null> {
    try {
      return await this.service.updateAppointmentDetails({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AppointmentDetails)
  async deleteAppointmentDetails(
    @graphql.Args() args: DeleteAppointmentDetailsArgs
  ): Promise<AppointmentDetails | null> {
    try {
      return await this.service.deleteAppointmentDetails(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
