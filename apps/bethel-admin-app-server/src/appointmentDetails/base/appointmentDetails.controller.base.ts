/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { AppointmentDetailsService } from "../appointmentDetails.service";
import { AppointmentDetailsCreateInput } from "./AppointmentDetailsCreateInput";
import { AppointmentDetails } from "./AppointmentDetails";
import { AppointmentDetailsFindManyArgs } from "./AppointmentDetailsFindManyArgs";
import { AppointmentDetailsWhereUniqueInput } from "./AppointmentDetailsWhereUniqueInput";
import { AppointmentDetailsUpdateInput } from "./AppointmentDetailsUpdateInput";

export class AppointmentDetailsControllerBase {
  constructor(protected readonly service: AppointmentDetailsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AppointmentDetails })
  async createAppointmentDetails(
    @common.Body() data: AppointmentDetailsCreateInput
  ): Promise<AppointmentDetails> {
    return await this.service.createAppointmentDetails({
      data: data,
      select: {
        addressId: true,
        apptId: true,
        createdAt: true,
        id: true,
        phoneNo: true,
        plebId: true,
        status: true,
        time: true,
        typeField: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [AppointmentDetails] })
  @ApiNestedQuery(AppointmentDetailsFindManyArgs)
  async appointmentDetailsItems(
    @common.Req() request: Request
  ): Promise<AppointmentDetails[]> {
    const args = plainToClass(AppointmentDetailsFindManyArgs, request.query);
    return this.service.appointmentDetailsItems({
      ...args,
      select: {
        addressId: true,
        apptId: true,
        createdAt: true,
        id: true,
        phoneNo: true,
        plebId: true,
        status: true,
        time: true,
        typeField: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AppointmentDetails })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async appointmentDetails(
    @common.Param() params: AppointmentDetailsWhereUniqueInput
  ): Promise<AppointmentDetails | null> {
    const result = await this.service.appointmentDetails({
      where: params,
      select: {
        addressId: true,
        apptId: true,
        createdAt: true,
        id: true,
        phoneNo: true,
        plebId: true,
        status: true,
        time: true,
        typeField: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AppointmentDetails })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateAppointmentDetails(
    @common.Param() params: AppointmentDetailsWhereUniqueInput,
    @common.Body() data: AppointmentDetailsUpdateInput
  ): Promise<AppointmentDetails | null> {
    try {
      return await this.service.updateAppointmentDetails({
        where: params,
        data: data,
        select: {
          addressId: true,
          apptId: true,
          createdAt: true,
          id: true,
          phoneNo: true,
          plebId: true,
          status: true,
          time: true,
          typeField: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AppointmentDetails })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteAppointmentDetails(
    @common.Param() params: AppointmentDetailsWhereUniqueInput
  ): Promise<AppointmentDetails | null> {
    try {
      return await this.service.deleteAppointmentDetails({
        where: params,
        select: {
          addressId: true,
          apptId: true,
          createdAt: true,
          id: true,
          phoneNo: true,
          plebId: true,
          status: true,
          time: true,
          typeField: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
