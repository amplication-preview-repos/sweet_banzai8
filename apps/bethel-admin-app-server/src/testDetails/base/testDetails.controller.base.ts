/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TestDetailsService } from "../testDetails.service";
import { TestDetailsCreateInput } from "./TestDetailsCreateInput";
import { TestDetails } from "./TestDetails";
import { TestDetailsFindManyArgs } from "./TestDetailsFindManyArgs";
import { TestDetailsWhereUniqueInput } from "./TestDetailsWhereUniqueInput";
import { TestDetailsUpdateInput } from "./TestDetailsUpdateInput";

export class TestDetailsControllerBase {
  constructor(protected readonly service: TestDetailsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TestDetails })
  async createTestDetails(
    @common.Body() data: TestDetailsCreateInput
  ): Promise<TestDetails> {
    return await this.service.createTestDetails({
      data: data,
      select: {
        createdAt: true,
        id: true,
        testId: true,
        testName: true,
        testPrice: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [TestDetails] })
  @ApiNestedQuery(TestDetailsFindManyArgs)
  async testDetailsItems(
    @common.Req() request: Request
  ): Promise<TestDetails[]> {
    const args = plainToClass(TestDetailsFindManyArgs, request.query);
    return this.service.testDetailsItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        testId: true,
        testName: true,
        testPrice: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TestDetails })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async testDetails(
    @common.Param() params: TestDetailsWhereUniqueInput
  ): Promise<TestDetails | null> {
    const result = await this.service.testDetails({
      where: params,
      select: {
        createdAt: true,
        id: true,
        testId: true,
        testName: true,
        testPrice: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TestDetails })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTestDetails(
    @common.Param() params: TestDetailsWhereUniqueInput,
    @common.Body() data: TestDetailsUpdateInput
  ): Promise<TestDetails | null> {
    try {
      return await this.service.updateTestDetails({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          testId: true,
          testName: true,
          testPrice: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TestDetails })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTestDetails(
    @common.Param() params: TestDetailsWhereUniqueInput
  ): Promise<TestDetails | null> {
    try {
      return await this.service.deleteTestDetails({
        where: params,
        select: {
          createdAt: true,
          id: true,
          testId: true,
          testName: true,
          testPrice: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
