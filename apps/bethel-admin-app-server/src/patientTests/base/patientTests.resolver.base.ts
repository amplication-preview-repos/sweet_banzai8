/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { PatientTests } from "./PatientTests";
import { PatientTestsCountArgs } from "./PatientTestsCountArgs";
import { PatientTestsFindManyArgs } from "./PatientTestsFindManyArgs";
import { PatientTestsFindUniqueArgs } from "./PatientTestsFindUniqueArgs";
import { CreatePatientTestsArgs } from "./CreatePatientTestsArgs";
import { UpdatePatientTestsArgs } from "./UpdatePatientTestsArgs";
import { DeletePatientTestsArgs } from "./DeletePatientTestsArgs";
import { PatientTestsService } from "../patientTests.service";
@graphql.Resolver(() => PatientTests)
export class PatientTestsResolverBase {
  constructor(protected readonly service: PatientTestsService) {}

  async _patientTestsItemsMeta(
    @graphql.Args() args: PatientTestsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [PatientTests])
  async patientTestsItems(
    @graphql.Args() args: PatientTestsFindManyArgs
  ): Promise<PatientTests[]> {
    return this.service.patientTestsItems(args);
  }

  @graphql.Query(() => PatientTests, { nullable: true })
  async patientTests(
    @graphql.Args() args: PatientTestsFindUniqueArgs
  ): Promise<PatientTests | null> {
    const result = await this.service.patientTests(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => PatientTests)
  async createPatientTests(
    @graphql.Args() args: CreatePatientTestsArgs
  ): Promise<PatientTests> {
    return await this.service.createPatientTests({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => PatientTests)
  async updatePatientTests(
    @graphql.Args() args: UpdatePatientTestsArgs
  ): Promise<PatientTests | null> {
    try {
      return await this.service.updatePatientTests({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PatientTests)
  async deletePatientTests(
    @graphql.Args() args: DeletePatientTestsArgs
  ): Promise<PatientTests | null> {
    try {
      return await this.service.deletePatientTests(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
