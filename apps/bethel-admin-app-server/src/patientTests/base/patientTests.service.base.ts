/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, PatientTests as PrismaPatientTests } from "@prisma/client";

export class PatientTestsServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PatientTestsCountArgs, "select">
  ): Promise<number> {
    return this.prisma.patientTests.count(args);
  }

  async patientTestsItems(
    args: Prisma.PatientTestsFindManyArgs
  ): Promise<PrismaPatientTests[]> {
    return this.prisma.patientTests.findMany(args);
  }
  async patientTests(
    args: Prisma.PatientTestsFindUniqueArgs
  ): Promise<PrismaPatientTests | null> {
    return this.prisma.patientTests.findUnique(args);
  }
  async createPatientTests(
    args: Prisma.PatientTestsCreateArgs
  ): Promise<PrismaPatientTests> {
    return this.prisma.patientTests.create(args);
  }
  async updatePatientTests(
    args: Prisma.PatientTestsUpdateArgs
  ): Promise<PrismaPatientTests> {
    return this.prisma.patientTests.update(args);
  }
  async deletePatientTests(
    args: Prisma.PatientTestsDeleteArgs
  ): Promise<PrismaPatientTests> {
    return this.prisma.patientTests.delete(args);
  }
}
