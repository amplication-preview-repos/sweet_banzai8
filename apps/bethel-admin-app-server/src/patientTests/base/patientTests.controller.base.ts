/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PatientTestsService } from "../patientTests.service";
import { PatientTestsCreateInput } from "./PatientTestsCreateInput";
import { PatientTests } from "./PatientTests";
import { PatientTestsFindManyArgs } from "./PatientTestsFindManyArgs";
import { PatientTestsWhereUniqueInput } from "./PatientTestsWhereUniqueInput";
import { PatientTestsUpdateInput } from "./PatientTestsUpdateInput";

export class PatientTestsControllerBase {
  constructor(protected readonly service: PatientTestsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PatientTests })
  async createPatientTests(
    @common.Body() data: PatientTestsCreateInput
  ): Promise<PatientTests> {
    return await this.service.createPatientTests({
      data: data,
      select: {
        createdAt: true,
        id: true,
        patient: true,
        patientId: true,
        patientRef: true,
        test: true,
        testId: true,
        testRef: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PatientTests] })
  @ApiNestedQuery(PatientTestsFindManyArgs)
  async patientTestsItems(
    @common.Req() request: Request
  ): Promise<PatientTests[]> {
    const args = plainToClass(PatientTestsFindManyArgs, request.query);
    return this.service.patientTestsItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        patient: true,
        patientId: true,
        patientRef: true,
        test: true,
        testId: true,
        testRef: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PatientTests })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async patientTests(
    @common.Param() params: PatientTestsWhereUniqueInput
  ): Promise<PatientTests | null> {
    const result = await this.service.patientTests({
      where: params,
      select: {
        createdAt: true,
        id: true,
        patient: true,
        patientId: true,
        patientRef: true,
        test: true,
        testId: true,
        testRef: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PatientTests })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePatientTests(
    @common.Param() params: PatientTestsWhereUniqueInput,
    @common.Body() data: PatientTestsUpdateInput
  ): Promise<PatientTests | null> {
    try {
      return await this.service.updatePatientTests({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          patient: true,
          patientId: true,
          patientRef: true,
          test: true,
          testId: true,
          testRef: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PatientTests })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePatientTests(
    @common.Param() params: PatientTestsWhereUniqueInput
  ): Promise<PatientTests | null> {
    try {
      return await this.service.deletePatientTests({
        where: params,
        select: {
          createdAt: true,
          id: true,
          patient: true,
          patientId: true,
          patientRef: true,
          test: true,
          testId: true,
          testRef: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
