/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PatientDetailsService } from "../patientDetails.service";
import { PatientDetailsCreateInput } from "./PatientDetailsCreateInput";
import { PatientDetails } from "./PatientDetails";
import { PatientDetailsFindManyArgs } from "./PatientDetailsFindManyArgs";
import { PatientDetailsWhereUniqueInput } from "./PatientDetailsWhereUniqueInput";
import { PatientDetailsUpdateInput } from "./PatientDetailsUpdateInput";

export class PatientDetailsControllerBase {
  constructor(protected readonly service: PatientDetailsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PatientDetails })
  async createPatientDetails(
    @common.Body() data: PatientDetailsCreateInput
  ): Promise<PatientDetails> {
    return await this.service.createPatientDetails({
      data: data,
      select: {
        createdAt: true,
        id: true,
        patientAge: true,
        patientGender: true,
        patientId: true,
        patientName: true,
        patientPhoneNo: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PatientDetails] })
  @ApiNestedQuery(PatientDetailsFindManyArgs)
  async patientDetailsItems(
    @common.Req() request: Request
  ): Promise<PatientDetails[]> {
    const args = plainToClass(PatientDetailsFindManyArgs, request.query);
    return this.service.patientDetailsItems({
      ...args,
      select: {
        createdAt: true,
        id: true,
        patientAge: true,
        patientGender: true,
        patientId: true,
        patientName: true,
        patientPhoneNo: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PatientDetails })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async patientDetails(
    @common.Param() params: PatientDetailsWhereUniqueInput
  ): Promise<PatientDetails | null> {
    const result = await this.service.patientDetails({
      where: params,
      select: {
        createdAt: true,
        id: true,
        patientAge: true,
        patientGender: true,
        patientId: true,
        patientName: true,
        patientPhoneNo: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PatientDetails })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePatientDetails(
    @common.Param() params: PatientDetailsWhereUniqueInput,
    @common.Body() data: PatientDetailsUpdateInput
  ): Promise<PatientDetails | null> {
    try {
      return await this.service.updatePatientDetails({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          patientAge: true,
          patientGender: true,
          patientId: true,
          patientName: true,
          patientPhoneNo: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PatientDetails })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePatientDetails(
    @common.Param() params: PatientDetailsWhereUniqueInput
  ): Promise<PatientDetails | null> {
    try {
      return await this.service.deletePatientDetails({
        where: params,
        select: {
          createdAt: true,
          id: true,
          patientAge: true,
          patientGender: true,
          patientId: true,
          patientName: true,
          patientPhoneNo: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
